#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "s21_smartcalc.h"

#test input_correct_validation
/* --------------------------------------input_correct_validation---*/
    
    char *string = "2*1";
    ck_assert_int_eq(input_validation(string), 0);

    string = "0";
    ck_assert_int_eq(input_validation(string), 0);

    string = "cos(2*1)";
    ck_assert_int_eq(input_validation(string), 0);

    string = "+2*1*sin(cos(25*x))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "002*1*sin(cos(25*x))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "ln(2x*1)";
    ck_assert_int_eq(input_validation(string), 0);

    string = "sqrt(-2.2x*(-1))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "0.5+ln(-2x*(-1.9))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "-2mod3";
    ck_assert_int_eq(input_validation(string), 0);

    string = "2+cos(sin(25)modsin(cos(3x)))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "-3^(-2)";
    ck_assert_int_eq(input_validation(string), 0);

#test input_incorrect_validation
/* --------------------------------------input_incorrect_validation---*/
    
    char *string = "2*cot(2*1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = "";
    ck_assert_int_eq(input_validation(string), -1);

    string = " 2*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "(2*(1+))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "(/2*(1+1))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "ln(2x-(*1))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "ln(2x*-1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-";
    ck_assert_int_eq(input_validation(string), -1);
    
    string = "2*1*cos6";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2.*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2.*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*(.1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = ".2*.1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1.";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-2t3+123";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*(1+2))-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*((1+2x5))-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-(3mod)-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*m*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2+(1-mod)+123";
    ck_assert_int_eq(input_validation(string), -1);

    string = "-3^-2";
    ck_assert_int_eq(input_validation(string), -1);

#test input_conversion_test
/* --------------------------------------input_conversion_test---*/

// input_conversion case 1

    char *string_input = "-2+cos(sin(-25)modsin(+cos(66x)))";
    char *correct_output = "-1*2+c(s(-1*25)ms(1*c(66*x)))";

    char output_string_1[MAX_TKN] = {};
    s_tokens *output = NULL;

    output = calloc(MAX_TKN, sizeof(s_tokens));
    if (output) {
        input_conversion(string_input, output);
        convertTokensToString(output, output_string_1);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string_1, correct_output);
    free(output);
   
// input_conversion case 2

    string_input = "x*sqrt(2*ln(-10)+tan(atan(25)acos(asin(3x)))-log(123))";
    correct_output = "x*V(2*l(-1*10)+t(T(25)C(S(3*x)))-L(123))";

    char output_string_2[MAX_TKN] = {};
    output = calloc(MAX_TKN, sizeof(s_tokens));
    if (output) {
        input_conversion(string_input, output);
        convertTokensToString(output, output_string_2);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string_2, correct_output);
    free(output);

// input_conversion case 4

    string_input = "1123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+12345";
    output = calloc(MAX_TKN, sizeof(s_tokens));
    ck_assert_int_eq(input_conversion(string_input, output), TOO_MUCH_ARGS);

// input_conversion case 5

    string_input = "(1-1+)";
    ck_assert_int_eq(input_conversion(string_input, output), INCORRECT_INPUT);
    free(output);


#test infix_to_postfix_conversion
/* --------------------------------------infix_to_postfix_conversion---*/

// infix_to_postfix case 1

    char *string_input = "2/(3+2)*5";
    char *correct_output = "232+/5*";

    char *output_string = NULL;
    s_tokens *infix = NULL;
    s_tokens *postfix = NULL;

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        convertTokensToString(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(output_string);
    free(infix);
    free(postfix);

// infix_to_postfix case 2

    string_input = "x*sqrt(cos(2+7)+tan(2+5))";
    correct_output = "x27+c25+t+V*";
    

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        convertTokensToString(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// infix_to_postfix case 3

    string_input = "-2+cos(sin(-25)modsin(+cos(66x)))";
    correct_output = "-12*-125*s166x*c*smc+";

    char output_string_3[MAX_TKN] = {};

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));

    if (infix && postfix) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        convertTokensToString(postfix, output_string_3);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string_3, correct_output);

    free(infix);
    free(postfix);

// infix_to_postfix case 4

    string_input = "2^(2^3)";
    correct_output = "223^^";

    char output_string_4[MAX_TKN] = {};

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));

    if (infix && postfix) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        convertTokensToString(postfix, output_string_4);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string_4, correct_output);

    free(infix);
    free(postfix);

// infix_to_postfix case 5

    string_input = "2^(2^3))";
    correct_output = "";

    char output_string_5[MAX_TKN] = {};

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));

    if (infix && postfix) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        convertTokensToString(postfix, output_string_5);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string_5, correct_output);

    free(infix);
    free(postfix);

#test calculation_test
/* --------------------------------------calculation---*/

// calculation case 1

    char *string_input = "2/(3+2)*5";
    char *correct_output = "2";

    char *output_string = NULL;
    s_tokens *infix = NULL;
    s_tokens *postfix = NULL;

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// calculation case 2

    string_input = "cos(0.785)+sin(0.785)+tan(0.785)+acos(0.785)+asin(0.785)+atan(0.785)+ln(0.785)+log(0.785)+sqrt(0.785)";
    correct_output = "5.188542";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    // printf("%s\n", output_string);
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// calculation case 3

    string_input = "-2+cos(sin(-25)modsin(+cos(66)))-(19mod12)^2";
    correct_output = "-50.24094";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// calculation case 4

    string_input = "-2/0+123";
    correct_output = "- INFINITY";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// calculation case 5

    string_input = "2/0";
    correct_output = "INFINITY";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);

// calculation case 6

    string_input = "sqrt(cos(2+7)+tan(2+5))";
    correct_output = "NaN";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

// calculation case 7

    // 255 arguments input
    string_input = "123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+123456789+12345";
    correct_output = "3086432070";

    infix = calloc(MAX_TKN, sizeof(s_tokens));
    postfix = calloc(MAX_TKN, sizeof(s_tokens));
    output_string = calloc(MAX_INPUT, sizeof(char));

    if (infix && postfix && output_string) {
        input_conversion(string_input, infix);
        infix_to_postfix(infix, postfix);
        calculation(postfix, output_string);
    } else {
        printf("out of memory\n");
    }
    ck_assert_str_eq(output_string, correct_output);

    free(infix);
    free(postfix);
    free(output_string);


/* --------------------------------------BONUS PART--------------------------------------*/

#test credit_test
/* --------------------------------------credit---*/

double loan = 50000;
double interestRate = 22.0;
double firstPayment = 0;
double lastPayment = 0;
int creditPeriod = 12;
ck_assert_double_eq_tol(total_payment(loan, interestRate, creditPeriod, ANNUITANTS, &firstPayment, &lastPayment), 56156.64, 10e-2);
ck_assert_double_eq_tol(firstPayment, 4679.72, 10e-2);

ck_assert_double_eq_tol(total_payment(loan, interestRate, creditPeriod, DIFFERENTIATED, &firstPayment, &lastPayment), 55958.33, 10e-2);
ck_assert_double_eq_tol(firstPayment, 5083.33, 10e-2);
ck_assert_double_eq_tol(lastPayment, 4243.06, 10e-2);

ck_assert_double_eq_tol(total_payment(loan, interestRate, creditPeriod, 5, &firstPayment, &lastPayment), -1, 10e-2);
ck_assert_double_eq_tol(total_payment(loan, interestRate, 0, 5, &firstPayment, &lastPayment), -1, 10e-2);

#include <math.h>
#include <stdio.h>
#include <string.h>

#include "s21_smartcalc.h"

#test input_correct_validation
/* ------------------------------------------------input_correct_validation---*/
    char *string = "2*1";
    ck_assert_int_eq(input_validation(string), 0);

    string = "0";
    ck_assert_int_eq(input_validation(string), 0);

    string = "cos(2*1)";
    ck_assert_int_eq(input_validation(string), 0);

    string = "+2*1*sin(cos(25*x))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "002*1*sin(cos(25*x))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "ln(2x*1)";
    ck_assert_int_eq(input_validation(string), 0);

    string = "sqrt(-2.2x*(-1))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "0.5+ln(-2x*(-1.9))";
    ck_assert_int_eq(input_validation(string), 0);

    string = "-2mod3";
    ck_assert_int_eq(input_validation(string), 0);

    string = "2+cos(sin(25)modsin(cos(3x)))";
    ck_assert_int_eq(input_validation(string), 0);

#test input_incorrect_validation
/* ------------------------------------------------input_incorrect_validation---*/
    char *string = "2*cot(2*1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = "";
    ck_assert_int_eq(input_validation(string), -1);

    string = " 2*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "(2*(1+))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "(/2*(1+1))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "ln(2x-(*1))";
    ck_assert_int_eq(input_validation(string), -1);

    string = "ln(2x*-1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-";
    ck_assert_int_eq(input_validation(string), -1);
    
    string = "2*1*cos6";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2.*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2.*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*(.1)";
    ck_assert_int_eq(input_validation(string), -1);

    string = ".2*.1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1.";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-2t3+123";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*(1+2))-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*((1+2x5))-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*1-(3mod)-2";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2*m*1";
    ck_assert_int_eq(input_validation(string), -1);

    string = "2+(1-mod)+123";
    ck_assert_int_eq(input_validation(string), -1);


#test input_conversion_test
/* ------------------------------------------------input_conversion_test---*/
    char *string_input = "-2+cos(sin(-25)modsin(+cos(66x)))";
    s_tokens output[2*MAX] = {};
    input_conversion(string_input, output);
    for (int i = 0; output[i].type; i ++) {
        if (output[i].type == 1) {
            printf("%g ", output[i].value);
        } else {
            printf("%c ", (char)output[i].value);
        }
    }
    putchar('\n');



    //string_input = "sqrt(2*ln(10)+tan(atan(25)acos(asin(3x)))-log(123))";
    //sprintf(string_correct_output, "%c(2*%c(10)+%c(%c(25)%c(%c(3x)))-%c(123))", SQRT, LN, TAN, ATAN, ACOS, ASIN, LOG);

    // printf("%s\n", string_correct_output);



#test infix_to_postfix_conversion
/* ------------------------------------------------infix_to_postfix_conversion---*/
    char string_input[MAX] = {};
    char string_output[MAX] = {};
    char string_correct_output[MAX] = {};

    sprintf(string_input, "2/(3+2)*5");
    sprintf(string_correct_output, "232+/5*");

    sprintf(string_output, "232+/5*");


#test helpers_test

    char symbol = '1';
    ck_assert_int_eq(isNumber(symbol), 1);

    symbol = 'b';
    ck_assert_int_eq(isNumber(symbol), 0);

    symbol = '+';
    ck_assert_int_eq(isOperation(symbol), 1);

    symbol = 'b';
    ck_assert_int_eq(isOperation(symbol), 0);

    int i = 0;
    char *string = "25)modsin(cos(3x)))";
    double output;
    i = getNumberFromString(string, &output);
    printf("%lf, %d\n", output, i);
